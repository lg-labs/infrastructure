services:
  sonarqube:
    image: sonarqube:${SONAR_VERSION}
    container_name: sonarqube
    hostname: sonarqube
    expose:
      - ${SONAR_PORT}
    ports:
      - "${SONAR_PORT}:${SONAR_PORT}"
    networks:
      - sonarnet
    depends_on:
      db_sonar:
        condition: service_healthy
    environment:
      - SONAR_JDBC_URL=jdbc:postgresql://db_sonar:5432/sonar
      - SONAR_JDBC_USERNAME=${POSTGRES_USER}
      - SONAR_JDBC_PASSWORD=${POSTGRES_PASS}
      # The following (commented out) setting is a workaround for the following error:
      #
      #     max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]
      #
      # It is better to add the following to the file `%USERPROFILE%\.wslconfig` on Windows instead:
      #
      #     [wsl2]
      #     kernelCommandLine="sysctl.vm.max_map_count=262144"
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
    volumes:
      - sonarqube_conf:/opt/sonarqube/conf
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_bundled-plugins:/opt/sonarqube/lib/bundled-plugins
      - sonarqube_logs:/opt/sonarqube/logs
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl sonarqube:${SONAR_PORT}/api/system/status | grep -q -e '\"status\":\"UP\"'  -e '\"status\":\"DB_MIGRATION_NEEDED\"' -e '\"status\":\"DB_MIGRATION_RUNNING\"'",
        ]
      interval: 25s
      timeout: 1s
      retries: 3
      start_period: 55s

  db_sonar:
    image: postgres:${POSTGRES_VERSION}
    container_name: db_sonar
    networks:
      - sonarnet
    hostname: postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASS}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgresql:/var/lib/postgresql
      - postgresql_data:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          memory: ${SONAR_DB_MEM_LIMIT}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB" ]
      interval: 5s
      timeout: 5s
      retries: 5

  sonar_api:
    image: alpine
    container_name: sonar_api
    depends_on:
      sonarqube:
        condition: service_healthy
    networks:
      - sonarnet
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # install curl
      apk add --no-cache curl
      # Change login using Sonarqube API
      curl -u admin:admin -X POST 'sonarqube:${SONAR_PORT}/api/users/update_login?login=admin&newLogin=${SONAR_USER}' -v
      # Change password using Sonarqube API
      curl -u ${SONAR_USER}:admin -X POST 'sonarqube:${SONAR_PORT}/api/users/change_password?login=${SONAR_USER}&previousPassword=admin&password=${SONAR_PASS}' -v
      # Create a sonar project backend
      curl -u ${SONAR_USER}:${SONAR_PASS} -X POST 'sonarqube:${SONAR_PORT}/api/projects/create?name=LgApp&project=lgapp'
       # Create a sonar project frontend
      curl -u ${SONAR_USER}:${SONAR_PASS} -X POST 'sonarqube:${SONAR_PORT}/api/projects/create?name=LgWeb&project=lgweb'
      "

networks:
  sonarnet:

volumes:
  sonarqube_conf:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  sonarqube_bundled-plugins:
  postgresql:
  postgresql_data:
